ggtitle("Difference in Liking between with and without label") +
theme_minimal() +
ylim(1, 100)  # Set the y-axis limits
print(plot)
source("~/Desktop/FloExp.R", echo=TRUE)
source("~/Desktop/FloExp.R", echo=TRUE)
source("~/Desktop/FloExp.R", echo=TRUE)
source("~/Desktop/FloExp.R", echo=TRUE)
source("~/Desktop/FloExp.R", echo=TRUE)
View(combined_flo_exp)
combined_flo %>% filter(trial_id == "Skepsis")
combined_flo %>% filter(trial_id == "Skepsis") %>%
# Remove rows where a specific column 'column_name' has value 0
df <- subset(df, column_name != 0)
source("~/Desktop/FloExp.R", echo=TRUE)
source("~/Desktop/FloExp.R", echo=TRUE)
source("~/Desktop/FloExp.R", echo=TRUE)
source("~/Desktop/FloExp.R", echo=TRUE)
source("~/Desktop/FloExp.R", echo=TRUE)
View(F240)
source("~/Desktop/FloExp.R", echo=TRUE)
source("~/Desktop/FloExp.R", echo=TRUE)
source("~/Desktop/FloExp.R", echo=TRUE)
View(results_con)
View(combined_flo)
source("~/Desktop/FloExp.R", echo=TRUE)
combined_flo %>% filter(trial_id == "Skepsis")
combined_flo %>% filter(trial_id == "Skepsis") %>% filter(Sum_Value < 35)
combined_flo <- combined_flo %>% filter(trial_id == "Skepsis") %>% filter(Sum_Value < 35)
Combined_overall <- bind_rows(combined_flo_exp, combined_flo)
combined_flo <- combined_flo %>% filter(!(trial_id == "Skepsis" & Sum_Value > 35))
View(combined_flo)
source("~/Desktop/FloExp.R", echo=TRUE)
combined_flo <- combined_flo %>% filter(!(trial_id == "Skepsis" & Sum_Value > 35))
Combined_overall <- bind_rows(combined_flo_exp, combined_flo)
plot_skepsis <- ggplot(skepsis, aes(x = condition, y = Sum_Value, fill = condition)) +
geom_point(
aes(color = condition),
position = position_jitter(height = 0),
size = 1,
alpha = 0.9
) +
geom_boxplot(
aes(group = condition),
width = 0.5,
outlier.shape = NA,
coef = 0,
color = "black"
) +
labs(x = "Stimulus", y = "Score") +
ggtitle("Skepsis") +
theme_minimal() +
ylim(1, 100)  # Set the y-axis limits
print(plot_skepsis)
source("~/Desktop/FloExp.R", echo=TRUE)
source("~/Desktop/FloExp.R", echo=TRUE)
# Check for normality
# Install and load the "nortest" package for additional normality tests
install.packages("nortest")
library(nortest)
# Conduct an Anderson-Darling normality test
print(ad.test(group1))
print(ad.test(group2))
# Or, use Shapiro-Wilk normality test
print(shapiro.test(group1))
print(shapiro.test(group2))
# Visual inspection of normality can also be done using QQ plot
qqnorm(group1)
qqline(group1, col = "steelblue")
qqnorm(group2)
qqline(group2, col = "steelblue")
# Check for homogeneity of variances
print(leveneTest(Sum_Value ~ condition, data = persuasion))
# Skepsis
# Subset the data for each group
group1 <- subset(skepsis, condition == "exp")$Sum_Value
group2 <- subset(skepsis, condition == "con")$Sum_Value
# Perform the independent t-test
test_skepsis <- t.test(group1, group2)
# Or, use Shapiro-Wilk normality test
print(shapiro.test(group1))
print(shapiro.test(group2))
# Visual inspection of normality can also be done using QQ plot
qqnorm(group1)
qqline(group1, col = "steelblue")
qqnorm(group2)
qqline(group2, col = "steelblue")
# Check for homogeneity of variances
print(leveneTest(Sum_Value ~ condition, data = skepsis))
# Subset the data for each group
group1 <- subset(recognition, condition == "exp")$Sum_Value
group2 <- subset(recognition, condition == "con")$Sum_Value
# Perform the independent t-test
test_recognition <- t.test(group1, group2)
# Shapiro-Wilk normality test
print(shapiro.test(group1))
print(shapiro.test(group2))
# Visual inspection of normality can also be done using QQ plot
qqnorm(group1)
qqline(group1, col = "steelblue")
qqnorm(group2)
qqline(group2, col = "steelblue")
# Check for homogeneity of variances
print(leveneTest(Sum_Value ~ condition, data = recognition))
# Subset the data for each group
group1 <- subset(skepsis, condition == "exp")$Sum_Value
group2 <- subset(skepsis, condition == "con")$Sum_Value
# Perform the independent t-test
test_skepsis <- t.test(group1, group2)
# Shapiro-Wilk normality test
print(shapiro.test(group1))
print(shapiro.test(group2))
# Visual inspection of normality can also be done using QQ plot
qqnorm(group1)
qqline(group1, col = "steelblue")
qqnorm(group2)
qqline(group2, col = "steelblue")
# Check for homogeneity of variances
print(leveneTest(Sum_Value ~ condition, data = skepsis))
# Subset the data for each group
group1 <- subset(skepsis, condition == "exp")$Sum_Value
group2 <- subset(skepsis, condition == "con")$Sum_Value
# Perform the independent t-test
test_skepsis <- t.test(group1, group2)
# Shapiro-Wilk normality test
print(shapiro.test(group1))
print(shapiro.test(group2))
# Subset the data for each group
group1 <- subset(skepsis, condition == "exp")$Sum_Value
group2 <- subset(skepsis, condition == "con")$Sum_Value
# Perform the independent t-test
test_skepsis <- t.test(group1, group2)
source("~/Desktop/FloExp.R", echo=TRUE)
# Subset the data for each group
group1 <- subset(skepsis, condition == "exp")$Sum_Value
group2 <- subset(skepsis, condition == "con")$Sum_Value
log_group1 <- log(group1)
log_group2 <- log(group2)
# Shapiro-Wilk normality test
print(shapiro.test(log_group1))
print(shapiro.test(log_group2))
# Subset the data for each group
group1 <- subset(skepsis, condition == "exp")$Sum_Value
group2 <- subset(skepsis, condition == "con")$Sum_Value
sqr_group1 <- sqrt(group1)
sqr_group2 <- sqrt(group2)
# Shapiro-Wilk normality test
print(shapiro.test(log_group1))
print(shapiro.test(log_group2))
# Check for missing values in group2
missing_values <- sum(is.na(group2))
# Print the number of missing values
print(missing_values)
sqr_group1
# Subset the data for each group
group1 <- subset(skepsis, condition == "exp")$Sum_Value
group2 <- subset(skepsis, condition == "con")$Sum_Value
log_group1 <- log(group1 + 1)
log_group2 <- log(group2 + 1)
log_group2
group2
# Subset the data for each group
group1 <- subset(skepsis, condition == "exp")$Sum_Value
group2 <- subset(skepsis, condition == "con")$Sum_Value
log_group1 <- log(group1 + 0.0001)
log_group2 <- log(group2 + 0.0001)
log_group2
log(0.0001)
# Subset the data for each group
group1 <- subset(skepsis, condition == "exp")$Sum_Value
group2 <- subset(skepsis, condition == "con")$Sum_Value
sqrt_group1 <- sqrt(group1 + 0.0001)
sqrt_group2 <- sqrt(group2 + 0.0001)
sqrt_group2
# Perform the independent t-test
test_skepsis <- t.test(group1, group2)
# Perform the independent t-test
test_skepsis <- t.test(sqrt_group1, sqrt_group2)
test_skepsis
# Visual inspection of normality can also be done using QQ plot
qqnorm(group1)
qqline(group1, col = "steelblue")
# Visual inspection of normality can also be done using QQ plot
qqnorm(sqrt_group2)
qqline(sqrt_group2, col = "steelblue")
# Shapiro-Wilk normality test
print(shapiro.test(log_group1))
print(shapiro.test(log_group2))
# Shapiro-Wilk normality test
print(shapiro.test(sqrt_group1))
print(shapiro.test(sqrt_group2))
# Visual inspection of normality can also be done using QQ plot
qqnorm(sqrt_group2)
qqline(sqrt_group2, col = "steelblue")
qqnorm(sqrt_group2)
# Subset the data for each group
group1 <- subset(skepsis, condition == "exp")$Sum_Value
group2 <- subset(skepsis, condition == "con")$Sum_Value
sqrt_group1 <- sqrt(group1 + 0.0001)
sqrt_group2 <- sqrt(group2 + 0.0001)
# Perform the independent t-test
test_skepsis <- t.test(sqrt_group1, sqrt_group2)
# Shapiro-Wilk normality test
print(shapiro.test(sqrt_group1))
print(shapiro.test(sqrt_group2))
# Shapiro-Wilk normality test
print(shapiro.test(group1))
print(shapiro.test(sqrt_group2))
qqnorm(sqrt_group2)
qqline(sqrt_group2, col = "steelblue")
# Perform the independent t-test
#test_skepsis <- t.test(group1, group2)
test_skepsis <- wilcox.test(group1, group2)
test_skepsis
library(ggplot2)
library(reshape2)
# Function to create images
create_image <- function(w, b) {
# Create the data
zeros <- rep(1,w)
ones  <- rep(0,b)
total <- c(ones, zeros)
shuffled_total <- sample(total, length(total))
matrix <- matrix(shuffled_total, nrow = 20, ncol = 20)
df <- melt(matrix)
ggplot(df, aes(x = Var2, y = -Var1, fill = factor(value))) +
geom_tile(color = "black", size = 0.5) +
scale_fill_manual(values = c("black", "white")) +
theme_minimal() +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()
)
}
# Function to generate multiple stimuli
generate_stimuli <- function(w, b, nr) {
for (i in 1:nr) {
print(create_image(w, b))
}
}
# Generate stimuli
generate_stimuli(1, 399, 1)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
# Generate stimuli
generate_stimuli(150, 250, 1)
# Generate stimuli
generate_stimuli(150, 250, 1)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
# Generate stimuli
generate_stimuli(220, 180, 1)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Carolina_Analysis_Brazil.R", echo=TRUE)
source("~/Desktop/Carolina_Analysis_Germany.R", echo=TRUE)
source("~/Desktop/Carolina_Analysis.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Carolina_Analysis_Germany.R", echo=TRUE)
source("~/Desktop/Carolina_Analysis_Brazil.R", echo=TRUE)
source("~/Desktop/Carolina_Analysis.R", echo=TRUE)
source("~/Desktop/Carolina_Analysis_Germany.R", echo=TRUE)
View(ratings)
View(combined_df)
View(Combined_overall)
View(combined_df)
View(combined_results_DE)
View(combined_results_DE)
combined_results_DE %>% filter(!(stimulus = "con" & Sum_Value < 10))
combined_results_DE %>% filter(!(stimulus = "short" & Sum_Value < 10))
combined_results_DE %>% filter(!(stimulus == "short" & Sum_Value < 10))
print(combined_results_DE)
combined_results_DE %>% filter(!(stimulus == "short" & Sum_Value < 10))
combined_results_DE <- combined_results_DE %>% filter(!(stimulus == "short" & Sum_Value < 10))
print(combined_results_DE)
source("~/Desktop/Carolina_Analysis.R", echo=TRUE)
# Load libraries
library(dplyr)
library(readr)
# Define the path to your directory
dir_path <- "/Users/simonknogler/Desktop/german"
# Load libraries
library(dplyr)
library(readr)
# Define the path to your directory
dir_path <- "/Users/simonknogler/Desktop/german"
# Get a list of all CSV files in the directory
file_list <- list.files(path = dir_path, pattern = "*.csv", full.names = TRUE)
# Function to generate a random IP-like string
generate_ip <- function() {
paste(sample(1:255, 4, replace = TRUE), collapse = ".")
}
# Load libraries
library(dplyr)
library(readr)
# Define the path to your directory
dir_path <- "/Users/simonknogler/Desktop/criminal"
# Get a list of all CSV files in the directory
file_list <- list.files(path = dir_path, pattern = "*.csv", full.names = TRUE)
# Function to generate a random IP-like string
generate_ip <- function() {
paste(sample(1:255, 4, replace = TRUE), collapse = ".")
}
# Loop through the list of files
for (file_path in file_list) {
# Load the CSV file into a data frame
df <- read_csv(file_path)
# Replace all values in the "ip" column with a unique pseudo-random IP
df <- df %>%
mutate(ip = map_chr(1:n(), ~generate_ip()))
# Write the modified data frame back to the CSV file
write_csv(df, file_path)
}
# Load libraries
library(dplyr)
library(readr)
library(purrr)
# Define the path to your directory
dir_path <- "/Users/simonknogler/Desktop/criminal"
# Get a list of all CSV files in the directory
file_list <- list.files(path = dir_path, pattern = "*.csv", full.names = TRUE)
# Function to generate a random IP-like string
generate_ip <- function() {
paste(sample(1:255, 4, replace = TRUE), collapse = ".")
}
# Loop through the list of files
for (file_path in file_list) {
# Load the CSV file into a data frame
df <- read_csv(file_path)
# Generate a random IP
random_ip <- generate_ip()
# Replace all values in the "ip" column with the same random IP
df <- df %>%
mutate(ip = random_ip)
# Write the modified data frame back to the CSV file
write_csv(df, file_path)
}
source("~/Desktop/ip magic .R", echo=TRUE)
# Install the required package
if(!require(sprintr)) {
install.packages('sprintr')
}
library(sprintr)
# Parameters for the random dot motion task
n_dots <- 100  # Total number of dots
coherence <- 0.2  # Proportion of dots moving coherently
dot_speed <- 5  # Speed of the dots
dot_lifetime <- 0.1  # Time each dot is displayed
direction <- 0  # Direction of coherent motion (in radians, 0 means rightward)
# Create the dots
dots <- create_dots(n_dots = n_dots,
coherence = coherence,
dot_speed = dot_speed,
dot_lifetime = dot_lifetime,
direction = direction)
# Display the stimulus
show_dots(dots)
if(!require(devtools)) {
install.packages('devtools')
}
devtools::install_github('dcnieho/sprintr')
# Create the dots
dots <- create_dots(n_dots = n_dots,
coherence = coherence,
dot_speed = dot_speed,
dot_lifetime = dot_lifetime,
direction = direction)
library(sprintr)
# Parameters for the random dot motion task
n_dots <- 100  # Total number of dots
coherence <- 0.2  # Proportion of dots moving coherently
dot_speed <- 5  # Speed of the dots
dot_lifetime <- 0.1  # Time each dot is displayed
direction <- 0  # Direction of coherent motion (in radians, 0 means rightward)
# Create the dots
dots <- create_dots(n_dots = n_dots,
coherence = coherence,
dot_speed = dot_speed,
dot_lifetime = dot_lifetime,
direction = direction)
# Display the stimulus
show_dots(dots)
library(ggplot2)
n_dots <- 100
df <- data.frame(
x = runif(n_dots, 0, 10),
y = runif(n_dots, 0, 10)
)
ggplot(df, aes(x, y)) +
geom_point()
library(reshape2)
# Function to create images
create_image <- function(w, b, remove_grid = FALSE) {
# Create the data
zeros <- rep(1,w)
ones  <- rep(0,b)
total <- c(ones, zeros)
shuffled_total <- sample(total, length(total))
matrix <- matrix(shuffled_total, nrow = 20, ncol = 20)
df <- melt(matrix)
p <- ggplot(df, aes(x = Var2, y = -Var1, fill = factor(value))) +
geom_tile(color = ifelse(remove_grid, NA, "black"), size = 0.5) +
scale_fill_manual(values = c("black", "white")) +
theme_minimal() +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()
)
# Add a border if the grid is removed
if(remove_grid) {
p <- p + geom_rect(aes(xmin = 0.5, xmax = 20.5, ymin = -0.5, ymax = -20.5),
colour = "black", fill = NA, linetype="solid", size = 0.5)
}
return(p)
}
# Function to generate multiple stimuli
generate_stimuli <- function(w, b, nr, dir_path, remove_grid = FALSE) {
for (i in 1:nr) {
filename <- paste0(dir_path, "/5w", i, ifelse(remove_grid, "_nogrid", ""), ".png")
png(filename)
print(create_image(w, b, remove_grid))  # print is necessary to render the ggplot2 object.
dev.off()
}
}
generate_stimuli(202,198,5)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Chess_Board_Stimuli.R", echo=TRUE)
source("~/Desktop/Carolina_Analysis_Brazil.R", echo=TRUE)
source("~/Desktop/Carolina_Analysis_Germany.R", echo=TRUE)
g92 <- read.csv("~/Desktop/german/g92.csv")
View(g92)
View(G7)
source("~/Desktop/Carolina_Analysis_Germany.R", echo=TRUE)
source("~/Desktop/Carolina_Analysis_Germany.R", echo=TRUE)
source("~/Desktop/Carolina_Analysis_Germany.R", echo=TRUE)
View(G35)
View(G35)
source("~/Desktop/Carolina_Analysis_Germany.R", echo=TRUE)
View(ratings)
View(stim)
View(ratings)
View(stim)
View(results_DE)
View(combined_results_DE)
102/3
View(G34)
View(G35)
View(G34)
View(G35)
View(G35)
source("~/Desktop/Carolina_Analysis_Germany.R", echo=TRUE)
source("~/Desktop/Carolina_Analysis_Brazil.R", echo=TRUE)
source("~/Desktop/Carolina_Analysis.R", echo=TRUE)
